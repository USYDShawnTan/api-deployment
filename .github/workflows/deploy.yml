name: Deploy to Vercel

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [frontend-updated, backend-updated]
  workflow_dispatch:
    inputs:
      trigger:
        description: "手动触发部署"
        required: false
        default: "手动触发部署"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Deployment Repository
        uses: actions/checkout@v3
        with:
          path: deployment

      - name: Checkout Frontend Repository
        uses: actions/checkout@v3
        with:
          repository: USYDShawnTan/api-frontend
          token: ${{ secrets.PAT_TOKEN }}
          path: frontend

      - name: Log Deployment Details
        run: |
          echo "Deployment triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.event.client_payload.repository || 'manual' }}"
          echo "Commit SHA: ${{ github.event.client_payload.sha || github.sha }}"
          date

      - name: Setup Project Structure
        run: |
          mkdir -p merged-project
          mkdir -p merged-project/frontend

          # 复制前端文件 - 使用源代码，Vercel将负责构建
          cp -r frontend/* merged-project/frontend/

          # 复制Vercel配置和入口文件
          cp deployment/vercel.json merged-project/
          cp deployment/index.py merged-project/

          # 验证前端package.json文件
          if [ -f merged-project/frontend/package.json ]; then
            echo "✅ 找到前端package.json文件"
          else
            echo "❌ 前端package.json文件不存在"
            exit 1
          fi

          # 添加requirements.txt文件 - 包含数据库依赖
          cat > merged-project/requirements.txt << EOF
          fastapi==0.95.0
          uvicorn==0.21.1
          motor==3.1.1
          python-dotenv==1.0.0
          pydantic==2.0.0
          pydantic-settings==2.0.0
          starlette==0.27.0
          EOF

          # 调试输出
          echo "最终部署文件结构:"
          ls -la merged-project/
          ls -la merged-project/frontend/
          echo "入口文件内容:"
          cat merged-project/index.py
          echo "前端package.json:"
          cat merged-project/frontend/package.json | grep -E 'name|version|scripts'

      # 安装并使用Vercel CLI直接部署
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          cd merged-project
          # 创建.vercel/project.json
          mkdir -p .vercel
          echo "{\"orgId\":\"${{ secrets.VERCEL_ORG_ID }}\",\"projectId\":\"${{ secrets.VERCEL_PROJECT_ID }}\"}" > .vercel/project.json

          # 设置Vercel部署环境变量
          export VERCEL_ORG_ID="${{ secrets.VERCEL_ORG_ID }}"
          export VERCEL_PROJECT_ID="${{ secrets.VERCEL_PROJECT_ID }}"

          # 执行部署，使用--cwd确保在正确目录
          echo "Deploying to Vercel..."
          vercel --token "${{ secrets.VERCEL_TOKEN }}" --prod --confirm \
            -e API_ACCESS_PASSWORD="${{ secrets.API_ACCESS_PASSWORD }}" \
            -e NODE_ENV="production" \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e MONGODB_DB_NAME="${{ secrets.MONGODB_DB_NAME }}"

      - name: Handle Deployment Failure
        if: failure()
        run: |
          echo "Deployment failed. See logs for details."
          echo "查看错误日志:"
          find . -name "*.log" -type f -exec cat {} \;

      - name: Deployment Success Notification
        if: success()
        run: echo "Deployment successful. Updated from ${{ github.event.client_payload.repository || 'manual trigger' }}"
