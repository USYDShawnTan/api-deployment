name: Deploy to Vercel

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_message:
        description: "部署说明"
        required: false
        default: "手动触发部署"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Deployment Repository
        uses: actions/checkout@v4
        with:
          path: deployment

      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.FRONTEND_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          path: frontend
          fetch-depth: 1

      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.BACKEND_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          path: backend
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare Project Structure
        run: |
          # 创建简单的部署结构
          mkdir -p deploy-package/api
          mkdir -p deploy-package/frontend

          # 复制核心 API 文件
          cp deployment/index.py deploy-package/api/
          touch deploy-package/api/__init__.py

          # 确保 app 目录存在
          if [ -d "backend/app" ]; then
            cp -r backend/app deploy-package/
          else
            mkdir -p deploy-package/app
            touch deploy-package/app/__init__.py
          fi

          # 处理 requirements.txt
          cp backend/requirements.txt deploy-package/

          # 确保 requirements.txt 包含 mangum 依赖
          if ! grep -q "mangum" deploy-package/requirements.txt; then
            echo "mangum>=0.17.0" >> deploy-package/requirements.txt
          fi

          # 打印 requirements.txt 内容以验证
          echo "Requirements.txt 内容:"
          cat deploy-package/requirements.txt

          # 复制前端文件
          cp -r frontend/* deploy-package/frontend/

          # 复制 Vercel 配置
          cp deployment/vercel.json deploy-package/

          # 显示部署结构
          echo "部署包结构:"
          find deploy-package -type f | grep -v "node_modules" | sort

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        id: deploy
        run: |
          cd deploy-package

          # 创建 Vercel 项目配置
          mkdir -p .vercel
          echo "{\"orgId\":\"${{ secrets.VERCEL_ORG_ID }}\",\"projectId\":\"${{ secrets.VERCEL_PROJECT_ID }}\"}" > .vercel/project.json

          # 部署到 Vercel
          vercel deploy --prod --token "${{ secrets.VERCEL_TOKEN }}" --confirm \
            -e API_ACCESS_PASSWORD="${{ secrets.API_ACCESS_PASSWORD }}" \
            -e NODE_ENV="production" \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e MONGODB_DB_NAME="${{ secrets.MONGODB_DB_NAME }}" \
            -e REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL }}"

          echo "status=$?" >> $GITHUB_OUTPUT

      - name: Notify Success
        if: success()
        run: |
          echo "✅ 部署成功 $(date)"
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\": \"🚀 部署成功: $(date)\"}" \
              "${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ 部署失败 $(date)"
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\": \"❌ 部署失败: $(date)\"}" \
              "${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
