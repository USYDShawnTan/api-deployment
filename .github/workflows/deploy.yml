name: Deploy to Vercel

on:
  workflow_dispatch: # 允许手动触发
  repository_dispatch:
    types: [frontend-update, backend-update] # 响应前端和后端仓库的更新

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 为前端设置Node.js环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 为后端设置Python环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 克隆前端仓库
      - name: Clone Frontend Repository
        run: |
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/USYDShawnTan/api-frontend.git frontend-repo

      # 构建前端
      - name: Build Frontend
        run: |
          cd frontend-repo
          npm install
          npm run build
          mkdir -p ../public
          cp -r build/* ../public/

      # 克隆后端仓库
      - name: Clone Backend Repository
        run: |
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/USYDShawnTan/api-backend.git backend-repo

      # 设置后端文件结构
      - name: Setup Backend Files
        run: |
          # 创建api目录结构
          mkdir -p api
          # 直接复制后端仓库中的所有内容到api目录
          cp -r backend-repo/* api/
          # 创建.vercel/project.json文件以指定Python版本
          mkdir -p .vercel
          echo '{"projectSettings":{"framework":null,"buildCommand":null,"devCommand":null,"outputDirectory":null,"rootDirectory":null,"installCommand":null,"ignoreCommand":null,"directoryListing":false,"nodeVersion":"18","analyticsId":null,"autoAssignCustomDomains":true,"enableUserLambda":true,"commandForIgnore":null,"devCommandRunsRewriter":null,"functionsRegion":"sin1","functions":{"running":{"runtime":"python3.9","memory":1024,"maxDuration":10}}}}' > .vercel/project.json
          # 创建requirements.txt备份并确保版本兼容
          cp api/requirements.txt api/requirements.original.txt
          # 确保兼容的依赖版本
          cat > api/requirements.txt << EOF
fastapi==0.95.2
uvicorn==0.22.0
pydantic==1.10.8
python-dotenv==1.0.0
typing-extensions==4.6.3
starlette==0.27.0
EOF

      # 安装Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # 部署到Vercel
      - name: Deploy to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
