name: Deploy to Vercel

on:
  workflow_dispatch: # 允许手动触发
  repository_dispatch:
    types: [frontend-update, backend-update] # 响应前端和后端仓库的更新

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 为前端设置Node.js环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 为后端设置Python环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 克隆前端仓库
      - name: Clone Frontend Repository
        run: |
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/USYDShawnTan/api-frontend.git frontend-repo

      # 构建前端
      - name: Build Frontend
        run: |
          cd frontend-repo
          npm install
          npm run build

      # 克隆后端仓库
      - name: Clone Backend Repository
        run: |
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/USYDShawnTan/api-backend.git backend-repo

      # 设置整合后的部署结构
      - name: Setup Deployment Structure
        run: |
          # 创建static目录（如果后端仓库中不存在）
          mkdir -p backend-repo/static
          # 复制前端构建的静态文件到后端的static目录
          cp -r frontend-repo/build/* backend-repo/static/
          # 确保后端服务于静态文件
          cat > backend-repo/app/static_files.py << EOF
from fastapi.staticfiles import StaticFiles
from fastapi import FastAPI

def setup_static_files(app: FastAPI):
    app.mount("/", StaticFiles(directory="static", html=True), name="static")
EOF
          # 修改后端的index.py以包含静态文件服务
          grep -q "from app.static_files import setup_static_files" backend-repo/app/index.py || echo "from app.static_files import setup_static_files" >> backend-repo/app/index.py
          grep -q "setup_static_files(app)" backend-repo/app/index.py || echo "setup_static_files(app)" >> backend-repo/app/index.py
          # 修改requirements.txt确保兼容性
          cp backend-repo/requirements.txt backend-repo/requirements.original.txt
          cat > backend-repo/requirements.txt << EOF
fastapi==0.95.2
uvicorn==0.22.0
pydantic==1.10.8
python-dotenv==1.0.0
typing-extensions==4.6.3
starlette==0.27.0
EOF
      
      # 安装Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # 部署到Vercel
      - name: Deploy to Vercel
        run: |
          cd backend-repo
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
