name: Deploy to Vercel

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [frontend-updated, backend-updated]
  workflow_dispatch:
    inputs:
      trigger:
        description: "手动触发部署"
        required: false
        default: "手动触发部署"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Deployment Repository
        uses: actions/checkout@v3
        with:
          path: deployment

      - name: Checkout Frontend Repository
        uses: actions/checkout@v3
        with:
          repository: USYDShawnTan/api-frontend
          token: ${{ secrets.PAT_TOKEN }}
          path: frontend

      - name: Log Deployment Details
        run: |
          echo "Deployment triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.event.client_payload.repository || 'manual' }}"
          echo "Commit SHA: ${{ github.event.client_payload.sha || github.sha }}"
          date

      - name: Setup Project Structure
        run: |
          mkdir -p merged-project
          mkdir -p merged-project/frontend

          # 复制前端文件 - 使用源代码，Vercel将负责构建
          cp -r frontend/* merged-project/frontend/

          # 复制Vercel配置和入口文件
          cp deployment/vercel.json merged-project/
          cp deployment/index.py merged-project/

          # 验证前端package.json文件
          if [ -f merged-project/frontend/package.json ]; then
            echo "✅ 找到前端package.json文件"
          else
            echo "❌ 前端package.json文件不存在"
            exit 1
          fi

          # 添加requirements.txt文件 - 包含数据库依赖
          cat > merged-project/requirements.txt << EOF
          fastapi==0.95.0
          uvicorn==0.21.1
          motor==3.1.1
          python-dotenv==1.0.0
          pydantic==2.0.0
          pydantic-settings==2.0.0
          starlette==0.27.0
          EOF

          # 初始化Git仓库以解决"not a git repository"错误
          cd merged-project
          git init
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Initial commit for deployment"
          cd ..

          # 调试输出
          echo "最终部署文件结构:"
          ls -la merged-project/
          ls -la merged-project/frontend/
          echo "入口文件内容:"
          cat merged-project/index.py
          echo "前端package.json:"
          cat merged-project/frontend/package.json | grep -E 'name|version|scripts'

      # 使用Vercel的官方GitHub Actions进行部署
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./merged-project
          vercel-args: "--prod"
          alias-domains: api.433200.xyz
          github-comment: false
        env:
          # API安全配置
          API_ACCESS_PASSWORD: ${{ secrets.API_ACCESS_PASSWORD }}
          # 环境配置
          NODE_ENV: production
          # MongoDB配置
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}

      - name: Handle Deployment Failure
        if: failure()
        run: |
          echo "Deployment failed. See logs for details."
          echo "查看错误日志:"
          find . -name "*.log" -type f -exec cat {} \;

      - name: Deployment Success Notification
        if: success()
        run: echo "Deployment successful. Updated from ${{ github.event.client_payload.repository || 'manual trigger' }}"
