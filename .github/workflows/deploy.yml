name: Deploy to Vercel

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_message:
        description: "ÈÉ®ÁΩ≤ËØ¥Êòé"
        required: false
        default: "ÊâãÂä®Ëß¶ÂèëÈÉ®ÁΩ≤"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Deployment Repository
        uses: actions/checkout@v4
        with:
          path: deployment

      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.FRONTEND_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          path: frontend
          fetch-depth: 1

      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.BACKEND_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          path: backend
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "backend/requirements.txt"

      - name: Log Deployment Start
        run: |
          echo "Deployment started at $(date)"
          echo "Trigger: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Deploy message: ${{ github.event.inputs.deploy_message }}"
          fi

      - name: Prepare Project Structure
        run: |
          mkdir -p deploy-package
          mkdir -p deploy-package/api
          mkdir -p deploy-package/frontend

          # Copy API files
          cp deployment/index.py deploy-package/api/
          touch deploy-package/api/__init__.py
          cp -r backend/app deploy-package/
          cp backend/requirements.txt deploy-package/

          # Copy frontend files
          cp -r frontend/* deploy-package/frontend/

          # Copy Vercel configuration
          cp deployment/vercel.json deploy-package/

          # Validate structure
          echo "Deployment package structure:"
          find deploy-package -type f | sort

          echo "API entry point:"
          cat deploy-package/api/index.py | head -20

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          cd deploy-package

          # Create Vercel project configuration
          mkdir -p .vercel
          echo "{\"orgId\":\"${{ secrets.VERCEL_ORG_ID }}\",\"projectId\":\"${{ secrets.VERCEL_PROJECT_ID }}\"}" > .vercel/project.json

          # Deploy to Vercel
          vercel deploy --prod --token "${{ secrets.VERCEL_TOKEN }}" --confirm \
            -e API_ACCESS_PASSWORD="${{ secrets.API_ACCESS_PASSWORD }}" \
            -e NODE_ENV="production" \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e MONGODB_DB_NAME="${{ secrets.MONGODB_DB_NAME }}" \
            -e REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL }}"

      - name: Handle Deployment Result
        if: always()
        run: |
          DEPLOY_STATUS=$?
          if [ $DEPLOY_STATUS -eq 0 ]; then
            echo "‚úÖ Deployment successful"
            if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"üöÄ ÈÉ®ÁΩ≤ÊàêÂäü: $(date)\"}" \
                "${{ secrets.DISCORD_WEBHOOK_URL }}"
            fi
          else
            echo "‚ùå Deployment failed"
            if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•: $(date)\"}" \
                "${{ secrets.DISCORD_WEBHOOK_URL }}"
            fi
            exit 1
          fi
